{
  "language": "Solidity",
  "sources": {
    "contracts/Staking.sol": {
      "content": "// stake: Lock tokens into our smart contract (Synthetix version?)\n// withdraw: unlock tokens from our smart contract\n// claimReward: users get their reward tokens\n//      What's a good reward mechanism?\n//      What's some good reward math?\n\n// Added functionality ideas: Use users funds to fund liquidity pools to make income from that?\n\n// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.7;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\n\nerror Staking__TransferFailed();\nerror Withdraw__TransferFailed();\nerror Staking__NeedsMoreThanZero();\n\ncontract Staking is ReentrancyGuard {\n    IERC20 public s_stakingToken;\n    IERC20 public s_rewardToken;\n\n    uint256 public constant REWARD_RATE = 100;\n    uint256 public s_totalSupply;\n    uint256 public s_rewardPerTokenStored;\n    uint256 public s_lastUpdateTime;\n\n    /** @dev Mapping from address to the amount the user has staked */\n    mapping(address => uint256) public s_balances;\n\n    /** @dev Mapping from address to the amount the user has been rewarded */\n    mapping(address => uint256) public s_userRewardPerTokenPaid;\n\n    /** @dev Mapping from address to the rewards claimable for user */\n    mapping(address => uint256) public s_rewards;\n\n    modifier updateReward(address account) {\n        // how much reward per token?\n        // get last timestamp\n        // between 12 - 1pm , user earned X tokens. Needs to verify time staked to distribute correct amount to each\n        // participant\n        s_rewardPerTokenStored = rewardPerToken();\n        s_lastUpdateTime = block.timestamp;\n        s_rewards[account] = earned(account);\n        s_userRewardPerTokenPaid[account] = s_rewardPerTokenStored;\n\n        _;\n    }\n\n    modifier moreThanZero(uint256 amount) {\n        if (amount == 0) {\n            revert Staking__NeedsMoreThanZero();\n        }\n        _;\n    }\n\n    constructor(address stakingToken, address rewardToken) {\n        s_stakingToken = IERC20(stakingToken);\n        s_rewardToken = IERC20(rewardToken);\n    }\n\n    function earned(address account) public view returns (uint256) {\n        uint256 currentBalance = s_balances[account];\n        // how much they were paid already\n        uint256 amountPaid = s_userRewardPerTokenPaid[account];\n        uint256 currentRewardPerToken = rewardPerToken();\n        uint256 pastRewards = s_rewards[account];\n        uint256 _earned = ((currentBalance * (currentRewardPerToken - amountPaid)) / 1e18) +\n            pastRewards;\n\n        return _earned;\n    }\n\n    /** @dev Basis of how long it's been during the most recent snapshot/block */\n    function rewardPerToken() public view returns (uint256) {\n        if (s_totalSupply == 0) {\n            return s_rewardPerTokenStored;\n        } else {\n            return\n                s_rewardPerTokenStored +\n                (((block.timestamp - s_lastUpdateTime) * REWARD_RATE * 1e18) / s_totalSupply);\n        }\n    }\n\n    function stake(uint256 amount) external updateReward(msg.sender) moreThanZero(amount) {\n        // keep track of how much this user has staked\n        // keep track of how much token we have total\n        // transfer the tokens to this contract\n        /** @notice Be mindful of reentrancy attack here */\n        s_balances[msg.sender] += amount;\n        s_totalSupply += amount;\n        //emit event\n        bool success = s_stakingToken.transferFrom(msg.sender, address(this), amount);\n        // require(success, \"Failed\"); Save gas fees here\n        if (!success) {\n            revert Staking__TransferFailed();\n        }\n    }\n\n    function withdraw(uint256 amount) external updateReward(msg.sender) moreThanZero(amount) {\n        s_balances[msg.sender] -= amount;\n        s_totalSupply -= amount;\n        // emit event\n        bool success = s_stakingToken.transfer(msg.sender, amount);\n        if (!success) {\n            revert Withdraw__TransferFailed();\n        }\n    }\n\n    function claimReward() external updateReward(msg.sender) {\n        uint256 reward = s_rewards[msg.sender];\n        bool success = s_rewardToken.transfer(msg.sender, reward);\n        if (!success) {\n            revert Staking__TransferFailed();\n        }\n        // contract emits X reward tokens per second\n        // disperse tokens to all token stakers\n        // reward emission != 1:1\n        // MATH\n        // @ 100 tokens / second\n        // @ Time = 0\n        // Person A: 80 staked\n        // Preson B: 20 staked\n        // @ Time = 1\n        // Person A: 80 staked, Earned: 80, Withdraw 0\n        // Perosn B: 20 staked, Earned: 20, Withdraw: 0\n        // @ Time = 2\n        // Person A: 80 staked, Earned: 160, Withdraw 0\n        // Person B: 20 staked, Earned: 40, Withdraw: 0\n        // @ Time = 3\n        // New person enters!\n        // staked 100\n        // Person A: 80 staked, Earned 240 + (80/200 * 100) => (40), Withdraw 0\n        // Perosn B: 20 staked, Earned: 60 + (20/200 * 100) => (10), Withdraw 0\n        // Person C: 100 staked, Earned: 50, Withdraw 0\n        // @ Time = 4\n        // Person A Withdraws & claimed rewards on everything!\n        // Person A: 0 staked, Withdraw: 280\n    }\n\n    // Getter for UI\n    function getStaked(address account) public view returns (uint256) {\n        return s_balances[account];\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}