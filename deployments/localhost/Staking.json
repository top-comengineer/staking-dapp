{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stakingToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "Staking__NeedsMoreThanZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Staking__TransferFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Withdraw__TransferFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "REWARD_RATE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "earned",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getStaked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardPerToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "s_balances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_lastUpdateTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_rewardPerTokenStored",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_rewardToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "s_rewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_stakingToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "s_userRewardPerTokenPaid",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x974114a54349fc2d15bd32af55bd96cd7205ffc7b71404af9524444c20b026bc",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "997769",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x375cbf5b1beb3094a90ea37a353a0be1c5667828c3f6cde63e7e2ce323e4d05c",
    "transactionHash": "0x974114a54349fc2d15bd32af55bd96cd7205ffc7b71404af9524444c20b026bc",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "997769",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  ],
  "numDeployments": 1,
  "solcInputHash": "d1636a0453ebde4e3c8e414be506f0a7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakingToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Staking__NeedsMoreThanZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Staking__TransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Withdraw__TransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"REWARD_RATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"s_balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_lastUpdateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_rewardPerTokenStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_rewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"s_rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_stakingToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"s_userRewardPerTokenPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"rewardPerToken()\":{\"details\":\"Basis of how long it's been during the most recent snapshot/block \"}},\"stateVariables\":{\"s_balances\":{\"details\":\"Mapping from address to the amount the user has staked \"},\"s_rewards\":{\"details\":\"Mapping from address to the rewards claimable for user \"},\"s_userRewardPerTokenPaid\":{\"details\":\"Mapping from address to the amount the user has been rewarded \"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Staking.sol\":\"Staking\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"contracts/Staking.sol\":{\"content\":\"// stake: Lock tokens into our smart contract (Synthetix version?)\\n// withdraw: unlock tokens from our smart contract\\n// claimReward: users get their reward tokens\\n//      What's a good reward mechanism?\\n//      What's some good reward math?\\n\\n// Added functionality ideas: Use users funds to fund liquidity pools to make income from that?\\n\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\nerror Staking__TransferFailed();\\nerror Withdraw__TransferFailed();\\nerror Staking__NeedsMoreThanZero();\\n\\ncontract Staking is ReentrancyGuard {\\n    IERC20 public s_stakingToken;\\n    IERC20 public s_rewardToken;\\n\\n    uint256 public constant REWARD_RATE = 100;\\n    uint256 public s_totalSupply;\\n    uint256 public s_rewardPerTokenStored;\\n    uint256 public s_lastUpdateTime;\\n\\n    /** @dev Mapping from address to the amount the user has staked */\\n    mapping(address => uint256) public s_balances;\\n\\n    /** @dev Mapping from address to the amount the user has been rewarded */\\n    mapping(address => uint256) public s_userRewardPerTokenPaid;\\n\\n    /** @dev Mapping from address to the rewards claimable for user */\\n    mapping(address => uint256) public s_rewards;\\n\\n    modifier updateReward(address account) {\\n        // how much reward per token?\\n        // get last timestamp\\n        // between 12 - 1pm , user earned X tokens. Needs to verify time staked to distribute correct amount to each\\n        // participant\\n        s_rewardPerTokenStored = rewardPerToken();\\n        s_lastUpdateTime = block.timestamp;\\n        s_rewards[account] = earned(account);\\n        s_userRewardPerTokenPaid[account] = s_rewardPerTokenStored;\\n\\n        _;\\n    }\\n\\n    modifier moreThanZero(uint256 amount) {\\n        if (amount == 0) {\\n            revert Staking__NeedsMoreThanZero();\\n        }\\n        _;\\n    }\\n\\n    constructor(address stakingToken, address rewardToken) {\\n        s_stakingToken = IERC20(stakingToken);\\n        s_rewardToken = IERC20(rewardToken);\\n    }\\n\\n    function earned(address account) public view returns (uint256) {\\n        uint256 currentBalance = s_balances[account];\\n        // how much they were paid already\\n        uint256 amountPaid = s_userRewardPerTokenPaid[account];\\n        uint256 currentRewardPerToken = rewardPerToken();\\n        uint256 pastRewards = s_rewards[account];\\n        uint256 _earned = ((currentBalance * (currentRewardPerToken - amountPaid)) / 1e18) +\\n            pastRewards;\\n\\n        return _earned;\\n    }\\n\\n    /** @dev Basis of how long it's been during the most recent snapshot/block */\\n    function rewardPerToken() public view returns (uint256) {\\n        if (s_totalSupply == 0) {\\n            return s_rewardPerTokenStored;\\n        } else {\\n            return\\n                s_rewardPerTokenStored +\\n                (((block.timestamp - s_lastUpdateTime) * REWARD_RATE * 1e18) / s_totalSupply);\\n        }\\n    }\\n\\n    function stake(uint256 amount) external updateReward(msg.sender) moreThanZero(amount) {\\n        // keep track of how much this user has staked\\n        // keep track of how much token we have total\\n        // transfer the tokens to this contract\\n        /** @notice Be mindful of reentrancy attack here */\\n        s_balances[msg.sender] += amount;\\n        s_totalSupply += amount;\\n        //emit event\\n        bool success = s_stakingToken.transferFrom(msg.sender, address(this), amount);\\n        // require(success, \\\"Failed\\\"); Save gas fees here\\n        if (!success) {\\n            revert Staking__TransferFailed();\\n        }\\n    }\\n\\n    function withdraw(uint256 amount) external updateReward(msg.sender) moreThanZero(amount) {\\n        s_balances[msg.sender] -= amount;\\n        s_totalSupply -= amount;\\n        // emit event\\n        bool success = s_stakingToken.transfer(msg.sender, amount);\\n        if (!success) {\\n            revert Withdraw__TransferFailed();\\n        }\\n    }\\n\\n    function claimReward() external updateReward(msg.sender) {\\n        uint256 reward = s_rewards[msg.sender];\\n        bool success = s_rewardToken.transfer(msg.sender, reward);\\n        if (!success) {\\n            revert Staking__TransferFailed();\\n        }\\n        // contract emits X reward tokens per second\\n        // disperse tokens to all token stakers\\n        // reward emission != 1:1\\n        // MATH\\n        // @ 100 tokens / second\\n        // @ Time = 0\\n        // Person A: 80 staked\\n        // Preson B: 20 staked\\n        // @ Time = 1\\n        // Person A: 80 staked, Earned: 80, Withdraw 0\\n        // Perosn B: 20 staked, Earned: 20, Withdraw: 0\\n        // @ Time = 2\\n        // Person A: 80 staked, Earned: 160, Withdraw 0\\n        // Person B: 20 staked, Earned: 40, Withdraw: 0\\n        // @ Time = 3\\n        // New person enters!\\n        // staked 100\\n        // Person A: 80 staked, Earned 240 + (80/200 * 100) => (40), Withdraw 0\\n        // Perosn B: 20 staked, Earned: 60 + (20/200 * 100) => (10), Withdraw 0\\n        // Person C: 100 staked, Earned: 50, Withdraw 0\\n        // @ Time = 4\\n        // Person A Withdraws & claimed rewards on everything!\\n        // Person A: 0 staked, Withdraw: 280\\n    }\\n\\n    // Getter for UI\\n    function getStaked(address account) public view returns (uint256) {\\n        return s_balances[account];\\n    }\\n}\\n\",\"keccak256\":\"0x2b905b3ca42c6344949f540b9c0eb489d860fc7ee48720276da250acb373897a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200115a3803806200115a8339818101604052810190620000379190620000e0565b600160008190555081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050506200017a565b600081519050620000da8162000160565b92915050565b60008060408385031215620000fa57620000f96200015b565b5b60006200010a85828601620000c9565b92505060206200011d85828601620000c9565b9150509250929050565b600062000134826200013b565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600080fd5b6200016b8162000127565b81146200017757600080fd5b50565b610fd0806200018a6000396000f3fe608060405234801561001057600080fd5b50600436106100f45760003560e01c80636aa0838f11610097578063b88a802f11610066578063b88a802f14610275578063bea081511461027f578063cd3daf9d146102af578063f245ace4146102cd576100f4565b80636aa0838f146101ed578063a694fc3a1461020b578063ab32eb6914610227578063adca9b7214610257576100f4565b8063399080ec116100d3578063399080ec146101635780635997bb37146101935780636374cc00146101b15780636a74a0fc146101cf576100f4565b80628cc262146100f95780632e1a7d4d14610129578063304ac91b14610145575b600080fd5b610113600480360381019061010e9190610c15565b6102fd565b6040516101209190610d44565b60405180910390f35b610143600480360381019061013e9190610c6f565b61041c565b005b61014d61065f565b60405161015a9190610d44565b60405180910390f35b61017d60048036038101906101789190610c15565b610665565b60405161018a9190610d44565b60405180910390f35b61019b6106ae565b6040516101a89190610d44565b60405180910390f35b6101b96106b3565b6040516101c69190610d29565b60405180910390f35b6101d76106d9565b6040516101e49190610d44565b60405180910390f35b6101f56106df565b6040516102029190610d44565b60405180910390f35b61022560048036038101906102209190610c6f565b6106e5565b005b610241600480360381019061023c9190610c15565b61092a565b60405161024e9190610d44565b60405180910390f35b61025f610942565b60405161026c9190610d29565b60405180910390f35b61027d610968565b005b61029960048036038101906102949190610c15565b610b43565b6040516102a69190610d44565b60405180910390f35b6102b7610b5b565b6040516102c49190610d44565b60405180910390f35b6102e760048036038101906102e29190610c15565b610bbe565b6040516102f49190610d44565b60405180910390f35b600080600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000610390610b5b565b90506000600860008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600081670de0b6b3a764000085856103ee9190610e40565b876103f99190610de6565b6104039190610db5565b61040d9190610d5f565b90508095505050505050919050565b33610425610b5b565b6004819055504260058190555061043b816102fd565b600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600454600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000811415610500576040517f9b677fa000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b82600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461054f9190610e40565b9250508190555082600360008282546105689190610e40565b925050819055506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33866040518363ffffffff1660e01b81526004016105ce929190610d00565b602060405180830381600087803b1580156105e857600080fd5b505af11580156105fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106209190610c42565b905080610659576040517f8ecca7d100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50505050565b60045481565b6000600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b606481565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60035481565b60055481565b336106ee610b5b565b60048190555042600581905550610704816102fd565b600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600454600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508160008114156107c9576040517f9b677fa000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b82600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546108189190610d5f565b9250508190555082600360008282546108319190610d5f565b925050819055506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330876040518463ffffffff1660e01b815260040161089993929190610cc9565b602060405180830381600087803b1580156108b357600080fd5b505af11580156108c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108eb9190610c42565b905080610924576040517feb4c684700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50505050565b60066020528060005260406000206000915090505481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b33610971610b5b565b60048190555042600581905550610987816102fd565b600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600454600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33846040518363ffffffff1660e01b8152600401610ab3929190610d00565b602060405180830381600087803b158015610acd57600080fd5b505af1158015610ae1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b059190610c42565b905080610b3e576040517feb4c684700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505050565b60086020528060005260406000206000915090505481565b6000806003541415610b71576004549050610bbb565b600354670de0b6b3a7640000606460055442610b8d9190610e40565b610b979190610de6565b610ba19190610de6565b610bab9190610db5565b600454610bb89190610d5f565b90505b90565b60076020528060005260406000206000915090505481565b600081359050610be581610f55565b92915050565b600081519050610bfa81610f6c565b92915050565b600081359050610c0f81610f83565b92915050565b600060208284031215610c2b57610c2a610f50565b5b6000610c3984828501610bd6565b91505092915050565b600060208284031215610c5857610c57610f50565b5b6000610c6684828501610beb565b91505092915050565b600060208284031215610c8557610c84610f50565b5b6000610c9384828501610c00565b91505092915050565b610ca581610e74565b82525050565b610cb481610ebc565b82525050565b610cc381610eb2565b82525050565b6000606082019050610cde6000830186610c9c565b610ceb6020830185610c9c565b610cf86040830184610cba565b949350505050565b6000604082019050610d156000830185610c9c565b610d226020830184610cba565b9392505050565b6000602082019050610d3e6000830184610cab565b92915050565b6000602082019050610d596000830184610cba565b92915050565b6000610d6a82610eb2565b9150610d7583610eb2565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610daa57610da9610ef2565b5b828201905092915050565b6000610dc082610eb2565b9150610dcb83610eb2565b925082610ddb57610dda610f21565b5b828204905092915050565b6000610df182610eb2565b9150610dfc83610eb2565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610e3557610e34610ef2565b5b828202905092915050565b6000610e4b82610eb2565b9150610e5683610eb2565b925082821015610e6957610e68610ef2565b5b828203905092915050565b6000610e7f82610e92565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610ec782610ece565b9050919050565b6000610ed982610ee0565b9050919050565b6000610eeb82610e92565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600080fd5b610f5e81610e74565b8114610f6957600080fd5b50565b610f7581610e86565b8114610f8057600080fd5b50565b610f8c81610eb2565b8114610f9757600080fd5b5056fea2646970667358221220d850f15a5f9256e25588b19fe7cebd6979dec2246fee93a68f105343a94f0f8f64736f6c63430008070033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "rewardPerToken()": {
        "details": "Basis of how long it's been during the most recent snapshot/block "
      }
    },
    "stateVariables": {
      "s_balances": {
        "details": "Mapping from address to the amount the user has staked "
      },
      "s_rewards": {
        "details": "Mapping from address to the rewards claimable for user "
      },
      "s_userRewardPerTokenPaid": {
        "details": "Mapping from address to the amount the user has been rewarded "
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10,
        "contract": "contracts/Staking.sol:Staking",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 132,
        "contract": "contracts/Staking.sol:Staking",
        "label": "s_stakingToken",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IERC20)117"
      },
      {
        "astId": 135,
        "contract": "contracts/Staking.sol:Staking",
        "label": "s_rewardToken",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IERC20)117"
      },
      {
        "astId": 140,
        "contract": "contracts/Staking.sol:Staking",
        "label": "s_totalSupply",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 142,
        "contract": "contracts/Staking.sol:Staking",
        "label": "s_rewardPerTokenStored",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 144,
        "contract": "contracts/Staking.sol:Staking",
        "label": "s_lastUpdateTime",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 149,
        "contract": "contracts/Staking.sol:Staking",
        "label": "s_balances",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 154,
        "contract": "contracts/Staking.sol:Staking",
        "label": "s_userRewardPerTokenPaid",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 159,
        "contract": "contracts/Staking.sol:Staking",
        "label": "s_rewards",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)117": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}