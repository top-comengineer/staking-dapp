{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stakingToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "Staking__NeedsMoreThanZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Staking__TransferFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Withdraw__TransferFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "REWARD_RATE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "earned",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardPerToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "s_balances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_lastUpdateTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_rewardPerTokenStored",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_rewardToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "s_rewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_stakingToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "s_userRewardPerTokenPaid",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xd02af0aef7d883cfa64ed1e682a250cade72110363f6c238472f4932e0d39e2c",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "946181",
    "logsBloom": "0x
    "blockHash": "0x301fefb9bd87e6eb545bdb898d3ad3e8399e8ce99bb9fd3417a5005f0f94c0fd",
    "transactionHash": "0xd02af0aef7d883cfa64ed1e682a250cade72110363f6c238472f4932e0d39e2c",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "946181",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  ],
  "numDeployments": 1,
  "solcInputHash": "960c8b22bdeed37779c70298459cc876",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakingToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Staking__NeedsMoreThanZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Staking__TransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Withdraw__TransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"REWARD_RATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"s_balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_lastUpdateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_rewardPerTokenStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_rewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"s_rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_stakingToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"s_userRewardPerTokenPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"rewardPerToken()\":{\"details\":\"Basis of how long it's been during the most recent snapshot/block \"}},\"stateVariables\":{\"s_balances\":{\"details\":\"Mapping from address to the amount the user has staked \"},\"s_rewards\":{\"details\":\"Mapping from address to the rewards claimable for user \"},\"s_userRewardPerTokenPaid\":{\"details\":\"Mapping from address to the amount the user has been rewarded \"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Staking.sol\":\"Staking\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"contracts/Staking.sol\":{\"content\":\"// stake: Lock tokens into our smart contract (Synthetix version?)\\n// withdraw: unlock tokens from our smart contract\\n// claimReward: users get their reward tokens\\n//      What's a good reward mechanism?\\n//      What's some good reward math?\\n\\n// Added functionality ideas: Use users funds to fund liquidity pools to make income from that?\\n// import oppenzeppelin reentrancy guard for extra security\\n\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nerror Staking__TransferFailed();\\nerror Withdraw__TransferFailed();\\nerror Staking__NeedsMoreThanZero();\\n\\ncontract Staking {\\n    IERC20 public s_stakingToken;\\n    IERC20 public s_rewardToken;\\n\\n    uint256 public constant REWARD_RATE = 100;\\n    uint256 public s_totalSupply;\\n    uint256 public s_rewardPerTokenStored;\\n    uint256 public s_lastUpdateTime;\\n\\n    /** @dev Mapping from address to the amount the user has staked */\\n    mapping(address => uint256) public s_balances;\\n\\n    /** @dev Mapping from address to the amount the user has been rewarded */\\n    mapping(address => uint256) public s_userRewardPerTokenPaid;\\n\\n    /** @dev Mapping from address to the rewards claimable for user */\\n    mapping(address => uint256) public s_rewards;\\n\\n    modifier updateReward(address account) {\\n        // how much reward per token?\\n        // get last timestamp\\n        // between 12 - 1pm , user earned X tokens. Needs to verify time staked to distribute correct amount to each\\n        // participant\\n        s_rewardPerTokenStored = rewardPerToken();\\n        s_lastUpdateTime = block.timestamp;\\n        s_rewards[account] = earned(account);\\n        s_userRewardPerTokenPaid[account] = s_rewardPerTokenStored;\\n\\n        _;\\n    }\\n\\n    modifier moreThanZero(uint256 amount) {\\n        if (amount == 0) {\\n            revert Staking__NeedsMoreThanZero();\\n        }\\n        _;\\n    }\\n\\n    constructor(address stakingToken, address rewardToken) {\\n        s_stakingToken = IERC20(stakingToken);\\n        s_rewardToken = IERC20(rewardToken);\\n    }\\n\\n    function earned(address account) public view returns (uint256) {\\n        uint256 currentBalance = s_balances[account];\\n        // how much they were paid already\\n        uint256 amountPaid = s_userRewardPerTokenPaid[account];\\n        uint256 currentRewardPerToken = rewardPerToken();\\n        uint256 pastRewards = s_rewards[account];\\n        uint256 _earned = ((currentBalance * (currentRewardPerToken - amountPaid)) / 1e18) +\\n            pastRewards;\\n\\n        return _earned;\\n    }\\n\\n    /** @dev Basis of how long it's been during the most recent snapshot/block */\\n    function rewardPerToken() public view returns (uint256) {\\n        if (s_totalSupply == 0) {\\n            return s_rewardPerTokenStored;\\n        } else {\\n            return\\n                s_rewardPerTokenStored +\\n                (((block.timestamp - s_lastUpdateTime) * REWARD_RATE * 1e18) / s_totalSupply);\\n        }\\n    }\\n\\n    function stake(uint256 amount) external updateReward(msg.sender) moreThanZero(amount) {\\n        // keep track of how much this user has staked\\n        // keep track of how much token we have total\\n        // transfer the tokens to this contract\\n        /** @notice Be mindful of reentrancy attack here */\\n        s_balances[msg.sender] += amount;\\n        s_totalSupply += amount;\\n        //emit event\\n        bool success = s_stakingToken.transferFrom(msg.sender, address(this), amount);\\n        // require(success, \\\"Failed\\\"); Save gas fees here\\n        if (!success) {\\n            revert Staking__TransferFailed();\\n        }\\n    }\\n\\n    function withdraw(uint256 amount) external updateReward(msg.sender) moreThanZero(amount) {\\n        s_balances[msg.sender] -= amount;\\n        s_totalSupply -= amount;\\n        // emit event\\n        bool success = s_stakingToken.transfer(msg.sender, amount);\\n        if (!success) {\\n            revert Withdraw__TransferFailed();\\n        }\\n    }\\n\\n    function claimReward() external updateReward(msg.sender) {\\n        uint256 reward = s_rewards[msg.sender];\\n        bool success = s_rewardToken.transfer(msg.sender, reward);\\n        if (!success) {\\n            revert Staking__TransferFailed();\\n        }\\n        // contract emits X reward tokens per second\\n        // disperse tokens to all token stakers\\n        // reward emission != 1:1\\n        // MATH\\n        // @ 100 tokens / second\\n        // @ Time = 0\\n        // Person A: 80 staked\\n        // Preson B: 20 staked\\n        // @ Time = 1\\n        // Person A: 80 staked, Earned: 80, Withdraw 0\\n        // Perosn B: 20 staked, Earned: 20, Withdraw: 0\\n        // @ Time = 2\\n        // Person A: 80 staked, Earned: 160, Withdraw 0\\n        // Person B: 20 staked, Earned: 40, Withdraw: 0\\n        // @ Time = 3\\n        // New person enters!\\n        // staked 100\\n        // Person A: 80 staked, Earned 240 + (80/200 * 100) => (40), Withdraw 0\\n        // Perosn B: 20 staked, Earned: 60 + (20/200 * 100) => (10), Withdraw 0\\n        // Person C: 100 staked, Earned: 50, Withdraw 0\\n        // @ Time = 4\\n        // Person A Withdraws & claimed rewards on everything!\\n        // Person A: 0 staked, Withdraw: 280\\n    }\\n}\\n\",\"keccak256\":\"0xffef1c9af32e7bf1c9e8098d72a706e22f70948307772c48920c054c39c862e7\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620010c9380380620010c98339818101604052810190620000379190620000d7565b816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505062000171565b600081519050620000d18162000157565b92915050565b60008060408385031215620000f157620000f062000152565b5b60006200010185828601620000c0565b92505060206200011485828601620000c0565b9150509250929050565b60006200012b8262000132565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600080fd5b62000162816200011e565b81146200016e57600080fd5b50565b610f4880620001816000396000f3fe608060405234801561001057600080fd5b50600436106100e95760003560e01c8063a694fc3a1161008c578063b88a802f11610066578063b88a802f1461023a578063bea0815114610244578063cd3daf9d14610274578063f245ace414610292576100e9565b8063a694fc3a146101d0578063ab32eb69146101ec578063adca9b721461021c576100e9565b80635997bb37116100c85780635997bb37146101585780636374cc00146101765780636a74a0fc146101945780636aa0838f146101b2576100e9565b80628cc262146100ee5780632e1a7d4d1461011e578063304ac91b1461013a575b600080fd5b61010860048036038101906101039190610b8d565b6102c2565b6040516101159190610cbc565b60405180910390f35b61013860048036038101906101339190610be7565b6103e1565b005b610142610623565b60405161014f9190610cbc565b60405180910390f35b610160610629565b60405161016d9190610cbc565b60405180910390f35b61017e61062e565b60405161018b9190610ca1565b60405180910390f35b61019c610654565b6040516101a99190610cbc565b60405180910390f35b6101ba61065a565b6040516101c79190610cbc565b60405180910390f35b6101ea60048036038101906101e59190610be7565b610660565b005b61020660048036038101906102019190610b8d565b6108a4565b6040516102139190610cbc565b60405180910390f35b6102246108bc565b6040516102319190610ca1565b60405180910390f35b6102426108e0565b005b61025e60048036038101906102599190610b8d565b610abb565b60405161026b9190610cbc565b60405180910390f35b61027c610ad3565b6040516102899190610cbc565b60405180910390f35b6102ac60048036038101906102a79190610b8d565b610b36565b6040516102b99190610cbc565b60405180910390f35b600080600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000610355610ad3565b90506000600760008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600081670de0b6b3a764000085856103b39190610db8565b876103be9190610d5e565b6103c89190610d2d565b6103d29190610cd7565b90508095505050505050919050565b336103ea610ad3565b60038190555042600481905550610400816102c2565b600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600354600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508160008114156104c5576040517f9b677fa000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b82600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546105149190610db8565b92505081905550826002600082825461052d9190610db8565b9250508190555060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33866040518363ffffffff1660e01b8152600401610592929190610c78565b602060405180830381600087803b1580156105ac57600080fd5b505af11580156105c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105e49190610bba565b90508061061d576040517f8ecca7d100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50505050565b60035481565b606481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60025481565b60045481565b33610669610ad3565b6003819055504260048190555061067f816102c2565b600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600354600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000811415610744576040517f9b677fa000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b82600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546107939190610cd7565b9250508190555082600260008282546107ac9190610cd7565b9250508190555060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330876040518463ffffffff1660e01b815260040161081393929190610c41565b602060405180830381600087803b15801561082d57600080fd5b505af1158015610841573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108659190610bba565b90508061089e576040517feb4c684700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50505050565b60056020528060005260406000206000915090505481565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b336108e9610ad3565b600381905550426004819055506108ff816102c2565b600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600354600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33846040518363ffffffff1660e01b8152600401610a2b929190610c78565b602060405180830381600087803b158015610a4557600080fd5b505af1158015610a59573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a7d9190610bba565b905080610ab6576040517feb4c684700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505050565b60076020528060005260406000206000915090505481565b6000806002541415610ae9576003549050610b33565b600254670de0b6b3a7640000606460045442610b059190610db8565b610b0f9190610d5e565b610b199190610d5e565b610b239190610d2d565b600354610b309190610cd7565b90505b90565b60066020528060005260406000206000915090505481565b600081359050610b5d81610ecd565b92915050565b600081519050610b7281610ee4565b92915050565b600081359050610b8781610efb565b92915050565b600060208284031215610ba357610ba2610ec8565b5b6000610bb184828501610b4e565b91505092915050565b600060208284031215610bd057610bcf610ec8565b5b6000610bde84828501610b63565b91505092915050565b600060208284031215610bfd57610bfc610ec8565b5b6000610c0b84828501610b78565b91505092915050565b610c1d81610dec565b82525050565b610c2c81610e34565b82525050565b610c3b81610e2a565b82525050565b6000606082019050610c566000830186610c14565b610c636020830185610c14565b610c706040830184610c32565b949350505050565b6000604082019050610c8d6000830185610c14565b610c9a6020830184610c32565b9392505050565b6000602082019050610cb66000830184610c23565b92915050565b6000602082019050610cd16000830184610c32565b92915050565b6000610ce282610e2a565b9150610ced83610e2a565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610d2257610d21610e6a565b5b828201905092915050565b6000610d3882610e2a565b9150610d4383610e2a565b925082610d5357610d52610e99565b5b828204905092915050565b6000610d6982610e2a565b9150610d7483610e2a565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610dad57610dac610e6a565b5b828202905092915050565b6000610dc382610e2a565b9150610dce83610e2a565b925082821015610de157610de0610e6a565b5b828203905092915050565b6000610df782610e0a565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610e3f82610e46565b9050919050565b6000610e5182610e58565b9050919050565b6000610e6382610e0a565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600080fd5b610ed681610dec565b8114610ee157600080fd5b50565b610eed81610dfe565b8114610ef857600080fd5b50565b610f0481610e2a565b8114610f0f57600080fd5b5056fea2646970667358221220eabc93ccc00dc1d30dfeccf579aa1c90854aa58830de0002ff54619a7fe39fdf64736f6c63430008070033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100e95760003560e01c8063a694fc3a1161008c578063b88a802f11610066578063b88a802f1461023a578063bea0815114610244578063cd3daf9d14610274578063f245ace414610292576100e9565b8063a694fc3a146101d0578063ab32eb69146101ec578063adca9b721461021c576100e9565b80635997bb37116100c85780635997bb37146101585780636374cc00146101765780636a74a0fc146101945780636aa0838f146101b2576100e9565b80628cc262146100ee5780632e1a7d4d1461011e578063304ac91b1461013a575b600080fd5b61010860048036038101906101039190610b8d565b6102c2565b6040516101159190610cbc565b60405180910390f35b61013860048036038101906101339190610be7565b6103e1565b005b610142610623565b60405161014f9190610cbc565b60405180910390f35b610160610629565b60405161016d9190610cbc565b60405180910390f35b61017e61062e565b60405161018b9190610ca1565b60405180910390f35b61019c610654565b6040516101a99190610cbc565b60405180910390f35b6101ba61065a565b6040516101c79190610cbc565b60405180910390f35b6101ea60048036038101906101e59190610be7565b610660565b005b61020660048036038101906102019190610b8d565b6108a4565b6040516102139190610cbc565b60405180910390f35b6102246108bc565b6040516102319190610ca1565b60405180910390f35b6102426108e0565b005b61025e60048036038101906102599190610b8d565b610abb565b60405161026b9190610cbc565b60405180910390f35b61027c610ad3565b6040516102899190610cbc565b60405180910390f35b6102ac60048036038101906102a79190610b8d565b610b36565b6040516102b99190610cbc565b60405180910390f35b600080600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000610355610ad3565b90506000600760008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600081670de0b6b3a764000085856103b39190610db8565b876103be9190610d5e565b6103c89190610d2d565b6103d29190610cd7565b90508095505050505050919050565b336103ea610ad3565b60038190555042600481905550610400816102c2565b600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600354600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508160008114156104c5576040517f9b677fa000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b82600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546105149190610db8565b92505081905550826002600082825461052d9190610db8565b9250508190555060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33866040518363ffffffff1660e01b8152600401610592929190610c78565b602060405180830381600087803b1580156105ac57600080fd5b505af11580156105c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105e49190610bba565b90508061061d576040517f8ecca7d100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50505050565b60035481565b606481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60025481565b60045481565b33610669610ad3565b6003819055504260048190555061067f816102c2565b600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600354600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000811415610744576040517f9b677fa000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b82600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546107939190610cd7565b9250508190555082600260008282546107ac9190610cd7565b9250508190555060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330876040518463ffffffff1660e01b815260040161081393929190610c41565b602060405180830381600087803b15801561082d57600080fd5b505af1158015610841573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108659190610bba565b90508061089e576040517feb4c684700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50505050565b60056020528060005260406000206000915090505481565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b336108e9610ad3565b600381905550426004819055506108ff816102c2565b600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600354600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33846040518363ffffffff1660e01b8152600401610a2b929190610c78565b602060405180830381600087803b158015610a4557600080fd5b505af1158015610a59573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a7d9190610bba565b905080610ab6576040517feb4c684700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505050565b60076020528060005260406000206000915090505481565b6000806002541415610ae9576003549050610b33565b600254670de0b6b3a7640000606460045442610b059190610db8565b610b0f9190610d5e565b610b199190610d5e565b610b239190610d2d565b600354610b309190610cd7565b90505b90565b60066020528060005260406000206000915090505481565b600081359050610b5d81610ecd565b92915050565b600081519050610b7281610ee4565b92915050565b600081359050610b8781610efb565b92915050565b600060208284031215610ba357610ba2610ec8565b5b6000610bb184828501610b4e565b91505092915050565b600060208284031215610bd057610bcf610ec8565b5b6000610bde84828501610b63565b91505092915050565b600060208284031215610bfd57610bfc610ec8565b5b6000610c0b84828501610b78565b91505092915050565b610c1d81610dec565b82525050565b610c2c81610e34565b82525050565b610c3b81610e2a565b82525050565b6000606082019050610c566000830186610c14565b610c636020830185610c14565b610c706040830184610c32565b949350505050565b6000604082019050610c8d6000830185610c14565b610c9a6020830184610c32565b9392505050565b6000602082019050610cb66000830184610c23565b92915050565b6000602082019050610cd16000830184610c32565b92915050565b6000610ce282610e2a565b9150610ced83610e2a565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610d2257610d21610e6a565b5b828201905092915050565b6000610d3882610e2a565b9150610d4383610e2a565b925082610d5357610d52610e99565b5b828204905092915050565b6000610d6982610e2a565b9150610d7483610e2a565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610dad57610dac610e6a565b5b828202905092915050565b6000610dc382610e2a565b9150610dce83610e2a565b925082821015610de157610de0610e6a565b5b828203905092915050565b6000610df782610e0a565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610e3f82610e46565b9050919050565b6000610e5182610e58565b9050919050565b6000610e6382610e0a565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600080fd5b610ed681610dec565b8114610ee157600080fd5b50565b610eed81610dfe565b8114610ef857600080fd5b50565b610f0481610e2a565b8114610f0f57600080fd5b5056fea2646970667358221220eabc93ccc00dc1d30dfeccf579aa1c90854aa58830de0002ff54619a7fe39fdf64736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "rewardPerToken()": {
        "details": "Basis of how long it's been during the most recent snapshot/block "
      }
    },
    "stateVariables": {
      "s_balances": {
        "details": "Mapping from address to the amount the user has staked "
      },
      "s_rewards": {
        "details": "Mapping from address to the rewards claimable for user "
      },
      "s_userRewardPerTokenPaid": {
        "details": "Mapping from address to the amount the user has been rewarded "
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 746,
        "contract": "contracts/Staking.sol:Staking",
        "label": "s_stakingToken",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IERC20)663"
      },
      {
        "astId": 749,
        "contract": "contracts/Staking.sol:Staking",
        "label": "s_rewardToken",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IERC20)663"
      },
      {
        "astId": 754,
        "contract": "contracts/Staking.sol:Staking",
        "label": "s_totalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 756,
        "contract": "contracts/Staking.sol:Staking",
        "label": "s_rewardPerTokenStored",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 758,
        "contract": "contracts/Staking.sol:Staking",
        "label": "s_lastUpdateTime",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 763,
        "contract": "contracts/Staking.sol:Staking",
        "label": "s_balances",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 768,
        "contract": "contracts/Staking.sol:Staking",
        "label": "s_userRewardPerTokenPaid",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 773,
        "contract": "contracts/Staking.sol:Staking",
        "label": "s_rewards",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)663": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}